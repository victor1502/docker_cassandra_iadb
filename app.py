from flask import Flask, jsonify
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json

# This secure connect bundle is autogenerated when you download your SCB,
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'data/secure-connect-victor-cassandra.zip'
}

# This token JSON file is autogenerated when you download your token,
# if yours is different update the file name below
with open("data/victor_cassandra-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

session.set_keyspace('victorcass')

app = Flask(__name__)

row = session.execute("select release_version from system.local").one()
if row:
  print(row[0])
else:
  print("An error occurred.")


session.set_keyspace('victorcass')

@app.route("/")
def index():
    return "<h1>Bienvenido a la API de Cassandra</h1><p>Usa /clientes, /tables, /pedidos.</p>"

@app.route('/tables')
def get_tables():
    rows = session.execute("SELECT table_name FROM system_schema.tables WHERE keyspace_name='victorcass'")
    tables = [row.table_name for row in rows]
    return "<br>".join(tables) if tables else "No hay datos disponibles."


@app.route('/clientes')
def get_clientes():
    rows = session.execute("SELECT * FROM cliente;")
    clientes = [str(row) for row in rows]
    return "<br>".join(clientes) if clientes else "No hay datos disponibles."


@app.route('/pedidos')
def get_pedidos():
    rows = session.execute("SELECT * FROM pedido WHERE pedido_id > 105 ALLOW FILTERING;")
    pedidos = [str(row) for row in rows]
    return "<br>".join(pedidos) if pedidos else "No hay datos disponibles."



if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)